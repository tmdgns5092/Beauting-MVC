<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="reservation">
    <!-- 모든 직원 정보 가져오기 -->
    <select id="selectEmployeeAllMaxPage" parameterType="hashmap" resultType="hashmap">
            SELECT COUNT(*) as count
            FROM (
            SELECT idx
            FROM employee
            WHERE shop_idx = ${idx} AND status != 2
            ) B
            JOIN employee A
            ON B.idx = A.idx
    </select>
    <!-- 직원의 목표치 가져오기 -->
    <select id="selectEmployeeGoalData" parameterType="hashmap" resultType="hashmap">
        SELECT A.employee_goal
        FROM (
            SELECT idx
            FROM shop_month_history
            WHERE shop_idx = #{idx} AND DATE_FORMAT(date, '%Y%m') = DATE_FORMAT(#{forDate}, '%Y%m')
        ) B
        JOIN shop_month_history A
        ON B.idx = A.idx
    </select>
    <!-- 판매 데이터 가져오기 -->
    <select id="selectSalesForDate" parameterType="hashmap" resultType="hashmap">
        SELECT *
        FROM (
            SELECT idx
            FROM ${id}_sales
            WHERE DATE_FORMAT(date,'%Y%m') = DATE_FORMAT(#{forDate},'%Y%m') and Date(date) <![CDATA[ <= ]]> Date(#{forDate}) and status != 3
        ) a
        JOIN ${id}_sales b
        ON a.idx = b.idx
    </select>
    <select id="selectEmployeeAll" parameterType="hashmap" resultType="hashmap">
            SELECT A.idx, concat('\"', A.name, '\"') as name, IFNULL(C.work_start, #{shop_close}) as work_start,
                      IFNULL(C.work_end, #{shop_open}) as work_end, IFNULL(D.schedule_count, 1) as schedule_count,
                       0 as month_goal, 0 as month_cost, 0 as toDay_cost, 0 as remainingDay_cost
            FROM (
                SELECT idx
                FROM employee
                WHERE shop_idx = ${idx} AND status = 0
            ) B
            JOIN employee A
            ON B.idx = A.idx
            LEFT JOIN  (
                SELECT work_start, work_end, employee_idx
                FROM ${id}_schedule
                WHERE DATE(date) = DATE(#{forDate})
            ) C
            ON B.idx = C.employee_idx
            LEFT JOIN (
                SELECT employee_idx, count(*) AS schedule_count
                FROM ${id}_schedule
                WHERE DATE_FORMAT(date,'%Y%m') = DATE_FORMAT(#{forDate},'%Y%m') AND DATE(date) <![CDATA[ >= ]]> DATE(#{forDate}) AND employee_idx IS NOT NULL
                GROUP BY employee_idx
            ) D
            ON A.idx = D.employee_idx
            ORDER BY A.procedure_int ASC
            LIMIT ${emplPage}, 7
	</select>
    <!-- 예약정보 가져오기 -->
    <select id="selectToDayReservation" parameterType="hashmap" resultType="hashmap">
        SELECT
        A.idx,
        A.client_idx,
        A.employee_idx,
        A.services_idx,
        A.type,
        A.un_name,
        A.un_phone,
        A.status,
        A.icons,
        DATE_FORMAT(A.date, "%H:%i") as original_time,
        B.resource,
        B.name AS service_name,
        C.name AS client_name,
        C.code AS client_code,
        <choose>
            <when test="default_minute == '10'">
                (CASE
                WHEN DATE_FORMAT(A.date, "%i") = 00 THEN DATE_FORMAT(A.date, "%H:00")
                WHEN DATE_FORMAT(A.date, "%i") = 15 THEN DATE_FORMAT(A.date, "%H:10")
                WHEN DATE_FORMAT(A.date, "%i") = 30 THEN DATE_FORMAT(A.date, "%H:30")
                WHEN DATE_FORMAT(A.date, "%i") = 45 THEN DATE_FORMAT(A.date, "%H:40")
                WHEN DATE_FORMAT(A.date, "%i") = 60 THEN DATE_FORMAT(A.date, "%H:60")
                ELSE DATE_FORMAT(A.date, "%H:%i")
                END) AS time,
                (CASE
                WHEN RIGHT(A.end_time, 2) >= 00 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   10 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "00")
                WHEN RIGHT(A.end_time, 2) >= 00 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   10 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "00")
                WHEN RIGHT(A.end_time, 2) >= 10 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   20 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "10")
                WHEN RIGHT(A.end_time, 2) >= 10 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   20 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "10")
                WHEN RIGHT(A.end_time, 2) >= 20 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   30 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "20")
                WHEN RIGHT(A.end_time, 2) >= 20 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   30 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "20")
                WHEN RIGHT(A.end_time, 2) >= 30 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   40 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "30")
                WHEN RIGHT(A.end_time, 2) >= 30 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   40 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "30")
                WHEN RIGHT(A.end_time, 2) >= 40 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   50 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "40")
                WHEN RIGHT(A.end_time, 2) >= 40 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   50 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "40")
                WHEN RIGHT(A.end_time, 2) >= 50 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   60 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "50")
                WHEN RIGHT(A.end_time, 2) >= 50 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   60 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "50")
                ELSE CONCAT(IF(SUBSTRING_INDEX(A.end_time,":",1) >= 10 , LEFT(A.end_time, 2), LEFT(A.end_time, 1)), ":00")
                END) AS end_time
            </when>
            <otherwise>
                (CASE
                WHEN DATE_FORMAT(A.date, "%i") = 00 OR DATE_FORMAT(A.date, "%i") = 10 THEN DATE_FORMAT(A.date, "%H:00")
                WHEN DATE_FORMAT(A.date, "%i") = 20 THEN DATE_FORMAT(A.date, "%H:15")
                WHEN DATE_FORMAT(A.date, "%i") = 30 OR DATE_FORMAT(A.date, "%i") = 40 THEN DATE_FORMAT(A.date, "%H:30")
                WHEN DATE_FORMAT(A.date, "%i") = 50 THEN DATE_FORMAT(A.date, "%H:45")
                WHEN DATE_FORMAT(A.date, "%i") = 60 THEN DATE_FORMAT(A.date, "%H:60")
                ELSE DATE_FORMAT(A.date, "%H:%i")
                END) AS time,
                (CASE
                WHEN RIGHT(A.end_time, 2) > 00 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   15 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "00")
                WHEN RIGHT(A.end_time, 2) > 00 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   15 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "00")
                WHEN RIGHT(A.end_time, 2) >= 15 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   30 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "15")
                WHEN RIGHT(A.end_time, 2) >= 15 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   30 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "15")
                WHEN RIGHT(A.end_time, 2) >= 30 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   45 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "30")
                WHEN RIGHT(A.end_time, 2) >= 30 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   45 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "30")
                WHEN RIGHT(A.end_time, 2) >= 45 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   60 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "45")
                WHEN RIGHT(A.end_time, 2) >= 45 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   60 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "45")
                ELSE CONCAT(IF(SUBSTRING_INDEX(A.end_time,":",1) >= 10, LEFT(A.end_time, 2), LEFT(A.end_time, 1)) , ":00")
                END) AS end_time
            </otherwise>
        </choose>
        FROM (SELECT * FROM ${id}_reservation) A
        INNER JOIN services B
        ON A.services_idx = B.idx AND B.useYN = 1
        LEFT JOIN ${id}_client C
        ON A.client_idx = C.idx
        WHERE A.shop_idx = #{idx} AND date(A.date) = date(now()) AND A.status > 0
    </select>
    <!-- Other date reservation coll-->
    <select id="selectDatePickReservation" parameterType="hashmap" resultType="hashmap">
        SELECT
        D.name as lastSale_name,
        DATE_FORMAT(D.date, '%Y.%m.%d') as lastSale_date,
        C.memo,
        C.sms_check,
        IFNULL(C.product, '[]') AS product,
        IFNULL(C.prepaid, '[]') AS prepaid,
        IFNULL(C.ticket, '[]') AS ticket,
        A.idx,
        A.client_idx,
        A.employee_idx,
        A.services_idx,
        A.type,
        A.un_name,
        A.un_phone,
        A.status,
        A.icons,
        A.memo AS res_memo,
        IFNULL(A.color, '#1C2745') AS color,
        DATE_FORMAT(A.date, "%H:%i") as original_time,
        B.resource,
        B.name AS service_name,
        C.name AS client_name,
        C.code AS client_code,
        C.phone AS client_phone,
        <choose>
            <when test="default_minute == '10'">
                (CASE
                WHEN DATE_FORMAT(A.date, "%i") = 00 THEN DATE_FORMAT(A.date, "%H:00")
                WHEN DATE_FORMAT(A.date, "%i") = 15 THEN DATE_FORMAT(A.date, "%H:10")
                WHEN DATE_FORMAT(A.date, "%i") = 30 THEN DATE_FORMAT(A.date, "%H:30")
                WHEN DATE_FORMAT(A.date, "%i") = 45 THEN DATE_FORMAT(A.date, "%H:40")
                WHEN DATE_FORMAT(A.date, "%i") = 60 THEN DATE_FORMAT(A.date, "%H:60")
                ELSE DATE_FORMAT(A.date, "%H:%i")
                END) AS time,
                (CASE
                WHEN RIGHT(A.end_time, 2) >= 00 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   10 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "00")
                WHEN RIGHT(A.end_time, 2) >= 00 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   10 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "00")
                WHEN RIGHT(A.end_time, 2) >= 10 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   20 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "10")
                WHEN RIGHT(A.end_time, 2) >= 10 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   20 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "10")
                WHEN RIGHT(A.end_time, 2) >= 20 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   30 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "20")
                WHEN RIGHT(A.end_time, 2) >= 20 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   30 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "20")
                WHEN RIGHT(A.end_time, 2) >= 30 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   40 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "30")
                WHEN RIGHT(A.end_time, 2) >= 30 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   40 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "30")
                WHEN RIGHT(A.end_time, 2) >= 40 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   50 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "40")
                WHEN RIGHT(A.end_time, 2) >= 40 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   50 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "40")
                WHEN RIGHT(A.end_time, 2) >= 50 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   60 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "50")
                WHEN RIGHT(A.end_time, 2) >= 50 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   60 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "50")
                ELSE CONCAT(IF(SUBSTRING_INDEX(A.end_time,":",1) >= 10 , LEFT(A.end_time, 2), LEFT(A.end_time, 1)), ":00")
                END) AS end_time
            </when>
            <otherwise>
                (CASE
                WHEN DATE_FORMAT(A.date, "%i") = 00 OR DATE_FORMAT(A.date, "%i") = 10 THEN DATE_FORMAT(A.date, "%H:00")
                WHEN DATE_FORMAT(A.date, "%i") = 20 THEN DATE_FORMAT(A.date, "%H:15")
                WHEN DATE_FORMAT(A.date, "%i") = 30 OR DATE_FORMAT(A.date, "%i") = 40 THEN DATE_FORMAT(A.date, "%H:30")
                WHEN DATE_FORMAT(A.date, "%i") = 50 THEN DATE_FORMAT(A.date, "%H:45")
                WHEN DATE_FORMAT(A.date, "%i") = 60 THEN DATE_FORMAT(A.date, "%H:60")
                ELSE DATE_FORMAT(A.date, "%H:%i")
                END) AS time,
                (CASE
                WHEN RIGHT(A.end_time, 2) > 00 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   15 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "00")
                WHEN RIGHT(A.end_time, 2) > 00 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   15 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "00")
                WHEN RIGHT(A.end_time, 2) >= 15 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   30 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "15")
                WHEN RIGHT(A.end_time, 2) >= 15 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   30 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "15")
                WHEN RIGHT(A.end_time, 2) >= 30 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   45 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "30")
                WHEN RIGHT(A.end_time, 2) >= 30 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   45 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "30")
                WHEN RIGHT(A.end_time, 2) >= 45 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   60 AND SUBSTRING_INDEX(A.end_time,":",1) >= 10 THEN CONCAT(LEFT(A.end_time, 2),":", "45")
                WHEN RIGHT(A.end_time, 2) >= 45 AND RIGHT(A.end_time, 2)   <![CDATA[ < ]]>   60 AND SUBSTRING_INDEX(A.end_time,":",1) <![CDATA[ < ]]> 10 THEN CONCAT(LEFT(A.end_time, 1),":", "45")
                ELSE CONCAT(IF(SUBSTRING_INDEX(A.end_time,":",1) >= 10, LEFT(A.end_time, 2), LEFT(A.end_time, 1)) , ":00")
                END) AS end_time
            </otherwise>
        </choose>
        FROM (SELECT * FROM ${id}_reservation) A
        INNER JOIN services B
        ON A.services_idx = B.idx
        LEFT JOIN ${id}_client C
        ON A.client_idx = C.idx
        LEFT JOIN (
        SELECT c.name, a.client_idx, a.date
        FROM ${id}_reservation a
        JOIN ( SELECT MAX(date) as date, client_idx FROM ${id}_reservation WHERE status = 5 GROUP BY client_idx) b
        ON a.date = b.date and a.client_idx = b.client_idx
        JOIN services c
        ON a.services_idx = c.idx
        WHERE a.status = 5
        LIMIT 1
        ) D
        ON A.client_idx = D.client_idx
        WHERE A.shop_idx = #{idx} AND date(A.date) = date(#{forDate}) AND A.status > 0 AND A.date >= "${forDate} ${shop_open}" AND A.date <![CDATA[ <= ]]> "${forDate} ${shop_close}"
    </select>
    <!-- 예약 업데이트 -->
    <update id="updateReservation" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
		UPDATE ${shopId}_reservation
		SET employee_idx = #{employee}, date = DATE_FORMAT(STR_TO_DATE(date, '%Y-%m-%d %H:%i:%s'), '%Y-%m-%d ${hour}:%${minute}:%s'), end_time = #{end_time}
		WHERE idx = #{idx}
	</update>
    <!-- 예약 이동 체크 -->
    <select id="selectReservationMoveCheck" parameterType="hashmap" resultType="hashmap">
        SELECT A.idx
        FROM (SELECT idx
              FROM ${shopId}_reservation
              WHERE
              (date <![CDATA[ >= ]]> '${forDate} ${hour}:${minute}:00' AND
              date <![CDATA[ < ]]> '${forDate} ${end_time}:00')AND
              employee_idx = ${employee} AND
              idx <![CDATA[ != ]]> ${idx} AND
              status > 0
            ) B
		JOIN ${shopId}_reservation A
		ON B.idx = A.idx
    </select>
    <!-- 예약 마감시간 업데이트 -->
    <update id="updateFormReservationEndTime" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
		UPDATE ${shopId}_reservation
		SET end_time = #{end_time}
		WHERE idx = #{idx}
	</update>
    <!-- 예약 등록 고객 검색 -->
    <select id="selectSortingAndPagingClients" parameterType="hashmap" resultType="hashmap">
        SELECT idx, name, phone, IFNULL(client_price, 0) AS client_price, IFNULL(noshow,0) AS noshow, sum_array_cells(REPLACE(prepaid->>"$.*", '"', '')) AS prepaid
        FROM ${shopId}_client
        WHERE EXISTS
        (SELECT idx FROM ${shopId}_client)
        <choose>
            <when test="type.equals('name_serch')">AND name LIKE '%${data}%'</when>
            <when test="type.equals('code_serch')">AND code = '${data}'</when>
            <when test="type.equals('phone_serch')">AND phone LIKE '%${data}%'</when>
            <when test="type.equals('all_serch')">
                AND
                code = '${data}' OR
                name LIKE '%${data}%' OR
                phone LIKE '%${data}%'
            </when>
            <otherwise></otherwise>
        </choose>
    </select>
    <!-- 예약 등록 고객 가져오기 -->
    <select id="selectReservationClientList_Count" parameterType="hashmap" resultType="hashmap">
        SELECT COUNT(b.idx) AS cnt
        FROM (
        SELECT idx
        FROM ${id}_client
        <choose>
            <when test="type.equals('name_serch')">WHERE name LIKE '%${data}%'</when>
            <when test="type.equals('code_serch')">WHERE code = '${data}'</when>
            <when test="type.equals('phone_serch')">WHERE phone LIKE '%${data}%'</when>
            <when test="type.equals('all_serch')">
                WHERE
                code = '${data}' OR
                name LIKE '%${data}%' OR
                phone LIKE '%${data}%'
            </when>
            <otherwise></otherwise>
        </choose>
        ) a
        JOIN ${id}_client b
        ON a.idx = b.idx
    </select>
    <select id="selectReservationClientList" parameterType="hashmap" resultType="hashmap">
        SELECT b.idx, b.name, b.phone, b.sms_check, FORMAT(CAST(sum_array_cells(json_extract(b.prepaid, '$[*].cost')) AS UNSIGNED), 0) AS prepaid, b.client_price, b.noshow
        FROM (
        SELECT idx
        FROM ${id}_client
        ) a
        JOIN ${id}_client b
        ON a.idx = b.idx
        <choose>
            <when test="type.equals('name_serch')">WHERE name LIKE '%${data}%'</when>
            <when test="type.equals('code_serch')">WHERE code = '${data}'</when>
            <when test="type.equals('phone_serch')">WHERE phone LIKE '%${data}%'</when>
            <when test="type.equals('all_serch')">
                WHERE
                code = '${data}' OR
                name LIKE '%${data}%' OR
                phone LIKE '%${data}%'
            </when>
            <otherwise></otherwise>
        </choose>
        LIMIT #{start_idx}, #{page_size}
    </select>
    <!-- 서비스 카테고리 가져오기 -->
    <select id="selectServiceCategory" parameterType="hashmap" resultType="hashmap">
        SELECT b.idx, b.category, b.type, b.shop_idx, IFNULL(b.resource->"$.color","#1C2745") AS color
        FROM (
          SELECT idx
          FROM services
          WHERE shop_idx = #{idx} AND type = 0 AND name is null AND useYN = 1
        ) a
        JOIN services b
        ON a.idx = b.idx
        ORDER BY b.procedure_int
    </select>
    <!-- 서비스 디테일 가져오기 -->
    <select id="serviceDetailCall" parameterType="hashmap" resultType="hashmap">
        SELECT b.idx, b.name, IF(JSON_EXTRACT(b.resource, '$.time') = "" or JSON_EXTRACT(b.resource, '$.time') is null, '"00:00"', JSON_EXTRACT(b.resource, '$.time')) AS time
        FROM (
          SELECT idx
          FROM services
          WHERE shop_idx = #{shopIdx} and type = 0 AND category = #{cateName} AND name IS NOT NULL AND useYN = 1
        ) a
        JOIN services b
        ON a.idx = b.idx
        ORDER BY b.procedure_int
    </select>
    <!-- 예약 직원 스케쥴 확인 -->
    <select id="selectEmployeScheduleCheck" parameterType="hashmap" resultType="hashmap">
        SELECT idx
        FROM ${shopId}_schedule
        WHERE
        date = #{res_date}
        AND employee_idx = ${emplIdx}
        AND CAST(CONCAT(SUBSTRING_INDEX(work_start, ':', 1), SUBSTRING_INDEX(work_start, ':', -1)) AS UNSIGNED) <![CDATA[ <= ]]> ${res_hour}${res_minute}
        AND CAST(CONCAT(SUBSTRING_INDEX(work_end, ':', 1), SUBSTRING_INDEX(work_end, ':', -1)) AS UNSIGNED) >= ${end_hour}${end_minute}
    </select>
    <!-- 매장 휴무일 확인 -->
    <select id="selectScheduleHoliday" parameterType="hashmap" resultType="hashmap">
        SELECT idx
        FROM ${id}_schedule
        WHERE DATE(date) = DATE(#{forDate}) AND useYN = 1
        LIMIT 0, 1
    </select>
    <!-- 예약 시간 중복  확인 -->
    <select id="selectReservationOverlapCheck" parameterType="hashmap" resultType="hashmap">
        SELECT idx
        FROM ${shopId}_reservation
        WHERE
          EXISTS (SELECT idx FROM ${shopId}_reservation) AND
          DATE(date) = date(#{res_date}) AND
          (
            (CAST(DATE_FORMAT(date, '%H%i') AS UNSIGNED) >= ${res_hour}${res_minute} AND CAST(DATE_FORMAT(date, '%H%i') AS UNSIGNED) <![CDATA[ < ]]> ${end_hour}${end_minute}) OR
            (CAST(CONCAT(SUBSTRING_INDEX(end_time, ':', 1),SUBSTRING_INDEX(end_time, ':', -1)) AS UNSIGNED) > ${res_hour}${res_minute} AND CAST(CONCAT(SUBSTRING_INDEX(end_time, ':', 1),SUBSTRING_INDEX(end_time, ':', -1)) AS UNSIGNED) <![CDATA[ < ]]> ${end_hour}${end_minute})
          )
          AND employee_idx = ${emplIdx} AND status > 0
          LIMIT 1
    </select>
    <!-- 직원 스케줄 확인 -->
    <select id="selectEmployeeScheduleCheck" parameterType="hashmap" resultType="hashmap">
        SELECT NULLIF(idx, 0) AS checkIdx
        FROM ${shopId}_schedule
        WHERE
          date = #{res_date} and employee_idx = #{emplIdx} and
          CAST(concat(left(work_start, 2), right(work_start, 2)) as UNSIGNED) <![CDATA[ <= ]]> ${res_hour}${res_minute} and
          CAST(concat(left(work_end, 2), right(work_end, 2)) as UNSIGNED) <![CDATA[ >= ]]> ${end_hour}${end_minute}
    </select>
    <!-- 예약 시간 중복 확인 (예약 수정) -->
    <select id="selectReservationOverlapCheck_ver2" parameterType="hashmap" resultType="hashmap">
        SELECT idx
        FROM ${shopId}_reservation
        WHERE
          EXISTS (SELECT idx FROM ${shopId}_reservation) AND
          DATE(date) = date(#{res_date}) AND
          (
            (CAST(DATE_FORMAT(date, '%H%i') AS UNSIGNED) >= ${res_hour}${res_minute} AND CAST(DATE_FORMAT(date, '%H%i') AS UNSIGNED) <![CDATA[ < ]]> ${end_hour}${end_minute}) OR
            (CAST(CONCAT(SUBSTRING_INDEX(end_time, ':', 1),SUBSTRING_INDEX(end_time, ':', -1)) AS UNSIGNED) > ${res_hour}${res_minute} AND CAST(CONCAT(SUBSTRING_INDEX(end_time, ':', 1),SUBSTRING_INDEX(end_time, ':', -1)) AS UNSIGNED) <![CDATA[ < ]]> ${end_hour}${end_minute})
          )
          AND employee_idx = ${emplIdx} AND idx <![CDATA[ <> ]]> ${res_idx} AND status > 0
          LIMIT 1
    </select>
    <!-- 예약 등록 -->
    <insert id="addReservation" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
		INSERT INTO ${shopId}_reservation (work_time, date, memo, shop_idx, services_idx, client_idx, employee_idx, end_time, type, un_name, un_phone, icons, sms_check, color)
		VALUES ( '${service_hour}:${service_minute}', '${res_date} ${res_hour}:${res_minute}:00', #{memo}, ${shopIdx}, #{service_detail}, ${clientIdx}, ${emplIdx}, #{end_time}, #{res_type}, #{un_name}, #{un_phone}, #{icons}, #{sms_check}, #{color})
	</insert>
    <!-- 예약정보 가져오기 -->
    <select id="callReservationDataFromIdx" parameterType="hashmap" resultType="hashmap">
        SELECT A.idx, A.icons, A.employee_idx, A.memo, A.sms_check, A.type, B.category , B.name AS service_name, DATE_FORMAT(A.date, "%Y-%m-%d") AS date, DATE_FORMAT(A.date, "%H:%i") AS res_time, A.end_time, B.idx AS detail_idx, C.idx AS cate_idx
        FROM ${shopId}_reservation A
        INNER JOIN services B
        ON A.services_idx = B.idx
        INNER JOIN services C
        ON B.category = C.category AND C.name is null
        WHERE A.idx = #{idx} AND C.type = 0 AND C.shop_idx = #{shopIdx}
    </select>
    <!-- 예약 수정 (세부항목) -->
    <update id="updateReservationDetail" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
        UPDATE ${shopId}_reservation
        SET
          work_time = '${service_hour}:${service_minute}',
          date = '${res_date} ${res_hour}:${res_minute}:00',
          memo = #{memo},
          shop_idx =  ${shopIdx},
          services_idx = #{service_detail},
          employee_idx = ${emplIdx},
          end_time = #{end_time},
          color = #{color},
          icons = #{icons},
          sms_check = #{sms_check}
        WHERE
          idx = #{res_idx}
    </update>
    <!-- 예약 캔슬 -->
    <update id="updateReservationCancel1" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
        UPDATE ${shopId}_reservation A INNER JOIN ${shopId}_client B
        ON A.client_idx = B.idx
        SET A.status = 3, B.noshow = B.noshow + 1
        WHERE A.idx = ${idx}
    </update>
    <update id="updateReservationCancel2" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
        UPDATE ${shopId}_reservation
        SET status = 3
        WHERE idx = ${idx}
    </update>
    <!-- 예약 취소 전 고객 정보 가져오기 -->
    <select id="selectClientInfo" parameterType="hashmap" resultType="hashmap">
        SELECT A.date, NULLIF(A.client_idx, 0) AS res_type, A.un_name, A.un_phone, B.*
        FROM ${shopId}_reservation A
        LEFT JOIN ${shopId}_client B
        ON A.client_idx = B.idx
        WHERE A.idx = ${idx}
    </select>
    <select id="selectReceiptNum" parameterType="hashmap" resultType="hashmap">
        SELECT *
        FROM ${shopId}_msg_history
        WHERE res_idx = ${idx}
    </select>
    <!-- 예약 취소 -->
    <update id="reservationRemove" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
        UPDATE ${shopId}_reservation
        SET status = 0
        WHERE idx = ${idx}
    </update>
    <!-- 예약 불이행 취소 -->
    <update id="reservationStatusUpdateDefault" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
        UPDATE ${shopId}_reservation
        SET status = 1
        WHERE idx = ${idx}
    </update>
    <!-- 불이행 횟수 차감 -->
    <update id="updateClientNoshowCountMinus" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
        UPDATE ${shopId}_client
        SET noshow = noshow - 1
        WHERE idx = ${idx}
    </update>
    <!-- 고객 idx 가져오기 -->
    <select id="selectClientIdx" parameterType="hashmap" resultType="hashmap">
        SELECT NULLIF(client_idx, 0) AS client_idx, type
        FROM ${shop_id}_reservation
        WHERE idx = ${res_idx}
    </select>

    <!-- =====================프로모션==================== -->
    <!-- 프로모션 등록 -->
    <insert id="insertPromotion" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
		INSERT INTO promotion (date, title, services_idx, target_value, value_type, memo, shop_idx)
		VALUES (now(), #{title}, #{services_idx}, #{target_value}, #{value_type}, #{memo}, #{shopIdx})
	</insert>
    <!-- 프로모션 수정 -->
    <update id="updatePromotion" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
		UPDATE promotion
		SET title = #{title}, services_idx = #{services_idx}, target_value = #{target_value}, memo = #{memo}, value_type = #{value_type}
		WHERE idx = #{idx} AND shop_idx = #{shopIdx}
	</update>
    <!-- 진행중인 프로모션 검색 -->
    <select id="selectOnePromotion" parameterType="hashmap" resultType="hashmap">
        SELECT a.*, b.category, b.name
        FROM promotion a
        JOIN services b
        ON a.services_idx = b.idx
        WHERE a.shop_idx = #{idx} AND DATE_FORMAT(a.date, '%Y%m') = DATE_FORMAT(now(), '%Y%m');
    </select>
    <!-- 지난 프로모션 검색 -->
    <select id="selectListPromotion" parameterType="hashmap" resultType="hashmap">
        SELECT a.*, b.category, b.name
        FROM promotion a
        JOIN services b
        ON a.services_idx = b.idx
        WHERE a.shop_idx = #{shopIdx} AND DATE_FORMAT(a.date, '%Y%m') <![CDATA[ < ]]> DATE_FORMAT(now(), '%Y%m')
        ORDER BY a.date DESC
    </select>
    <!-- 자동문자 설정 -->
    <select id="selectReservationAutoMsg" parameterType="hashmap" resultType="hashmap">
        SELECT *
        FROM BeautyingNail.message_auto
        WHERE shop_idx = ${shopIdx} AND onoff = 1 AND
            (type = 1 OR
            type = 2 OR
            type = 3 OR
            type = 4)
    </select>
    <!-- 예약 취소 설정 가져오기 -->
    <select id="selectCancleAutoSetting" parameterType="hashmap" resultType="hashmap">
        SELECT *
        FROM BeautyingNail.message_auto
        WHERE shop_idx = ${shopIdx} AND onoff = 1 AND type = 5
    </select>
    <!-- 자동 문자 설정 가져오기 -->
    <select id="selectMessageAuto" parameterType="hashmap" resultType="hashmap">
        SELECT *
        FROM BeautyingNail.message_auto
        WHERE shop_idx = ${idx} AND onoff = 1 AND (type = 1 OR type = 2 OR type = 3 OR type = 4)
    </select>
    <!-- 이미 등록된 예약 문자 가져오기 -->
    <select id="beforSendHistory1" parameterType="hashmap" resultType="hashmap">
        SELECT *
        FROM BeautyingNail.${id}_msg_history
        WHERE
            res_idx = #{resIdx} AND
            (send_type LIKE 1 OR send_type LIKE 2 OR send_type LIKE 3 OR send_type LIKE 4)
    </select>
    <!--<select id="beforSendHistory1" parameterType="hashmap" resultType="hashmap">-->
        <!--SELECT *-->
        <!--FROM BeautyingNail.${id}_msg_history-->
        <!--WHERE-->
            <!--res_idx = #{resIdx} AND-->
            <!--wait <![CDATA[ <> ]]> 0 AND-->
            <!--(send_type LIKE 1 OR send_type LIKE 2 OR send_type LIKE 3 OR send_type LIKE 4)-->
    <!--</select>-->
    <!-- 예약 발송 취소 DB UPDATE -->
    <update id="updateMsgHistroyFromReservationMsg" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
        UPDATE BeautyingNail.${id}_msg_history
        SET wait = CASE
        <foreach collection="list" item="item" index="index">
            WHEN receipt_num = #{item.receipt_num} THEN 0
        </foreach>
        ELSE wait
        END,
        fail = CASE
        <foreach collection="list" item="item" index="index">
            WHEN receipt_num = #{item.receipt_num} THEN 1
        </foreach>
        ELSE fail
        END,
        success = CASE
        <foreach collection="list" item="item" index="index">
            WHEN receipt_num = #{item.receipt_num} THEN 0
        </foreach>
        ELSE success
        END,
        p_status = CASE
        <foreach collection="list" item="item" index="index">
            WHEN receipt_num = #{item.receipt_num} THEN 3
        </foreach>
        ELSE p_status
        END
        WHERE (
        <foreach collection="list" item="item" index="index">
            <if test="index != 0">OR</if>
            receipt_num LIKE #{item.receipt_num}
        </foreach>
        )
    </update>
    <!-- 이미 등록된 예약 문자 가져오기 -->
    <select id="selectReservationFromIdx" parameterType="hashmap" resultType="hashmap">
        SELECT *
        FROM BeautyingNail.${id}_reservation A
        LEFT JOIN ${id}_client B
        ON A.client_idx = B.idx
        WHERE A.idx = ${resIdx}
    </select>

    <!-- 자동 문자 msg_history insert -->
    <insert id="insertAutoMsgHistory" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
        INSERT INTO ${shopId}_msg_history (
        method,
        target_count,
        receipt_num,
        send_type,
        res_idx,
        p_status,
        receive_time,
        wait,
        content,
        client_idx
        )
        VALUES (
        ${method},
        ${send_count},
        #{receipt_num},
        #{send_type},
        #{res_idx},
        2,
        #{receiveDate},
        #{send_count},
        #{content}
        <choose>
            <when test="res_type == 0">, ${client_idx}</when>
            <when test="res_type == 1">, NULL</when>
        </choose>
        )
    </insert>
    <insert id="insertAutoMsgHistorySub" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
        INSERT INTO ${shopId}_msg_history (
        method,
        target_count,
        receipt_num,
        send_type,
        p_status,
        res_idx,
        wait,
        content,
        client_idx
        )
        VALUES (
        ${method},
        ${send_count},
        #{receipt_num},
        #{send_type},
        2,
        #{res_idx},
        #{send_count},
        #{content}
        <choose>
            <when test="res_type == 0">, ${client_idx}</when>
            <when test="res_type == 1">, NULL</when>
        </choose>
        )
    </insert>

    <!--자동문자 차감-->
    <update id="SMSPointConsumption" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ID">
		UPDATE shop
		SET msg_point = msg_point - ${sendPoint}
		WHERE idx = #{idx}
	</update>

    <select id="selectShopInfo" parameterType="hashmap" resultType="hashmap">
        SELECT *
        FROM shop
        WHERE idx = ${idx}
    </select>
</mapper>
